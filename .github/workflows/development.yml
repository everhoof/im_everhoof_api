name: cd

on:
  push:
    branches:
      - develop

jobs:
  staging-deploy:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [14]

    steps:
      - name: Set NODE_ENV
        run: NODE_ENV=$APP_NODE_ENV
        env:
          APP_NODE_ENV: ${{ secrets.STAGING_NODE_ENV }}

      - name: Checkout 🛎
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - name: Setup node env 🏗
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}
          check-latest: true

      - name: Get yarn cache directory path 🛠
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules 📦
        uses: actions/cache@v2.1.4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies 👨🏻‍💻
        run: yarn --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Build project
        run: yarn build

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            Port $SSH_PORT
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
            SendEnv APP_DIR
            SendEnv APP_NODE_ENV
          END
        env:
          SSH_USER: ${{ secrets.STAGING_SSH_USER }}
          SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          SSH_HOST: ${{ secrets.STAGING_SSH_HOST }}
          SSH_PORT: ${{ secrets.STAGING_SSH_PORT }}

      - name: Create version file
        run: |
          echo "{\"version\": \"$(git rev-parse HEAD)\"}" > version.json

      - name: Tar files
        run: >
          tar --ignore-failed-read --exclude=./artifacts.tgz -czvf artifacts.tgz
          dist
          mail
          .env
          deploy.sh
          ecosystem.config.js
          environment.js
          ormconfig.js
          package.json
          tsconfig.build.json
          tsconfig.json
          yarn.lock
          version.json
          || [[ $? -eq 1 ]]

      - name: Copy dist files
        run: |
          echo -n "$UDP_MESSAGE" >/dev/udp/$SSH_HOST/62544
          ssh staging 'mkdir -p $APP_DIR'
          scp -r artifacts.tgz deploy.sh staging:$APP_DIR
        env:
          APP_DIR: ${{ secrets.STAGING_APP_DIR }}
          SSH_HOST: ${{ secrets.PRODUCTION_SSH_HOST }}
          UDP_MESSAGE: ${{ secrets.PRODUCTION_UDP_MESSAGE }}

      - name: Run deploy script
        run: ssh staging 'cd $APP_DIR && export NODE_ENV=$APP_NODE_ENV && bash deploy.sh'
        env:
          APP_DIR: ${{ secrets.STAGING_APP_DIR }}
          APP_NODE_ENV: ${{ secrets.STAGING_NODE_ENV }}
