# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Message {
  id: Int!
  ownerId: Float
  randomId: String
  system: Boolean!
  content: String!
  username: String
  deletedById: Float
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  owner: User
  pictures: [Picture!]!
  deletedBy: User
}

type Mutation {
  updateOnlineStatus: Boolean!
  updateAvatar(pictureId: Int!): User!
  punish(userId: Int!, type: PunishmentTypes!, reason: String!, duration: Int): User!
  unpunish(userId: Int!): User!
  createMessage(content: String, randomId: String, pictures: [Int!] = []): Message!
  deleteMessage(messageId: Int!): Message!
  signIn(email: String!, password: String!): Token!
  signUp(email: String!, username: String, password: String!): User!
  confirmEmail(token: String!): Token!
  requestEmailConfirmation: User!
  requestPasswordReset(email: String!): Boolean!
  resetPassword(token: String!, password: String!): Token!
}

type Picture {
  id: Int!
  ownerId: Int
  sId: Int!
  mId: Int!
  oId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User!
  s: PictureRepresentation!
  m: PictureRepresentation!
  o: PictureRepresentation!
}

type PictureRepresentation {
  id: Int!
  height: Float!
  width: Float!
  size: Float!
  path: String!
  link: String!
}

enum PunishmentTypes {
  ban
  mute
}

type Query {
  getCurrentUser: User!
  getUserById(id: Int!): User!
  getOnline: [User!]!
  getMessages(count: Int = 100, page: Int = 1): [Message!]!
  getGrants: String!
  getHello: String!
  getPictureById(pictureId: Int!): Picture!
}

type Role {
  id: Int!
  name: String!
}

type Subscription {
  onlineUpdated: [User!]!
  userUpdated: User!
  messageCreated: Message!
  messageDeleted: Message!
}

type Token {
  id: Int!
  value: String!
  ownerId: Int!
  createdAt: DateTime!
  expiresAt: DateTime
  usedAt: DateTime
}

type User {
  id: Int!
  email: String!
  username: String
  avatarId: String
  wasOnlineAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  roles: [Role!]!
  avatar: Picture
  emailConfirmed: Boolean
  muted: Boolean
}
